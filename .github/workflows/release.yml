name: Release

on:
  push:
    # Only run this workflow for tag pushes (e.g. v1.0.0)
    tags: [ 'v*' ]
  # Allow manual runs from the Actions UI and accept an optional tag input
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.2.3). If empty, a patch bump from the latest tag will be created automatically.'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine or create release tag
        id: tag
        run: |
          set -e
          # INPUT_TAG comes from workflow_dispatch input when run manually
          INPUT_TAG="${{ github.event.inputs.tag }}"
          REF_NAME="${{ github.ref_name }}"
          if [ -n "${INPUT_TAG}" ]; then
            TAG="${INPUT_TAG}"
          else
            # If triggered by a tag push, use that tag
            if [ "${{ github.event_name }}" = "push" ] && [[ "${REF_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              TAG="${REF_NAME}"
            else
              # find latest tag, or start at v0.0.0
              if git describe --tags --abbrev=0 >/dev/null 2>&1; then
                LATEST=$(git describe --tags --abbrev=0)
              else
                LATEST="v0.0.0"
              fi
              # parse semver (expects vMAJ.MIN.PATCH)
              MAJ=$(echo "${LATEST}" | sed -E 's/^v([0-9]+)\..*/\1/')
              MIN=$(echo "${LATEST}" | sed -E 's/^v[0-9]+\.([0-9]+)\..*/\1/')
              PATCH=$(echo "${LATEST}" | sed -E 's/^v[0-9]+\.[0-9]+\.([0-9]+).*/\1/')
              MAJ=${MAJ:-0}; MIN=${MIN:-0}; PATCH=${PATCH:-0}
              NEXT=$((PATCH + 1))
              TAG="v${MAJ}.${MIN}.${NEXT}"
            fi
          fi

          # validate tag format
          if [[ ! "${TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid tag format: ${TAG}. Must be vMAJ.MIN.PATCH"
            exit 1
          fi

          echo "Using release tag: ${TAG}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

          # If this run was not triggered by a tag push matching TAG, create & push the tag so it exists in the repo
          if [ "${{ github.event_name }}" != "push" ] || [[ "${REF_NAME}" != "${TAG}" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag -a "${TAG}" -m "Release ${TAG}"
            git push origin "${TAG}"
          fi

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: cd src && go mod download

      - name: Run vet & tests
        run: |
          cd src
          go vet ./...
          go test ./... -v

      # Note: this workflow runs on explicit tag pushes (or manual dispatch).
      # We intentionally do NOT create tags here to avoid accidental or recursive runs.

      - name: Build cross-platform binaries
        run: |
          set -e
          mkdir -p releases
          cd src
          GOOS=windows GOARCH=amd64 go build -ldflags "-s -w" -o ../releases/arrsync-windows-amd64.exe .
          GOOS=windows GOARCH=arm64 go build -ldflags "-s -w" -o ../releases/arrsync-windows-arm64.exe .
          GOOS=linux GOARCH=amd64 go build -ldflags "-s -w" -o ../releases/arrsync-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -ldflags "-s -w" -o ../releases/arrsync-linux-arm64 .
          GOOS=darwin GOARCH=amd64 go build -ldflags "-s -w" -o ../releases/arrsync-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags "-s -w" -o ../releases/arrsync-darwin-arm64 .
          cd ..
          sha256sum releases/* > releases/checksums.txt

      - name: Create GitHub Release (with assets)
        id: gh_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          files: releases/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
